{"name":"nnForge","tagline":"Convolutional and fully-connected neural networks C++ library","body":"What is nnForge?\r\n----------------\r\n\r\nnnForge is a library for training convolutional and fully-connected neural networks. It includes CPU and GPU (CUDA) backends.\r\n\r\nLayers\r\n------\r\n\r\nThe library has a number of layers defined:\r\n* Convolutional (1D, 2D, 3D, and 4D)\r\n* Fully connected\r\n* Local contrast subtractive (CPU backend - no limitations, GPU backend - 2D only)\r\n* RGB->YUV conversion (CPU backend: forward propagation only, GPU backend - forward + backward prop)\r\n* Max spatial subsampling (CPU backend - no limitations, GPU backend - 2D and 3D only)\r\n* Average spatial subsampling (CPU backend - no limitations, GPU backend - 2D only)\r\n* Maxout - [arXiv:1302.4389](http://arxiv.org/abs/1302.4389)\r\n* Rectification - |x|\r\n* Hyperbolic tangent - 1.7159*tanh(0.666666*x)\r\n* Rectified linear unit - max(0,x)\r\n* Soft rectified linear unit - log(1+exp(x))\r\n* Softmax\r\n\r\nTraining\r\n--------\r\n\r\nThe library implements the following training algorithms:\r\n* Stochastic Gradient Descent\r\n* Stochastic Diagonal Levenberg-Marquardt, well described in Y. LeCun, L. Bottou, Y. Bengio and P. Haffner: Gradient-Based Learning Applied to Document Recognition, _Proceedings of the IEEE, 86(11):2278-2324, November 1998_ and Y. LeCun, L. Bottou, G. Orr and K. Muller: Efficient BackProp, in Orr, G. and Muller K. (Eds), _Neural Networks: Tricks of the trade, Springer, 1998_. You will find these papers at [Yann LeCun site](http://yann.lecun.com/exdb/publis/index.html).\r\n\r\nRegularization\r\n--------------\r\n\r\nThe library also has \"dropout\" and \"Upper bound on L2 norm of the weight vector\" regularizations implemented:\r\n* Improving neural networks by preventing co-adaptation of feature detectors, Geoffery Hinton, Nitish Srivastava, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov, [arXiv:1207.0580](http://arxiv.org/abs/1207.0580)\r\n\r\nError functions\r\n---------------\r\n\r\nError functions available:\r\n* MSE - Mean Squared Error\r\n* SHL - Squared Hinge Loss\r\n* NLL - Negative Log-Likelihood\r\n\r\nLicense\r\n-------\r\n\r\nnnForge is an open-source software distributed under the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\nDownload\r\n--------\r\n\r\nDownload the [latest version](https://github.com/milakov/nnForge/tarball/master). Access all the releases along with release notes on [GitHub](https://github.com/milakov/nnForge/releases).\r\n\r\nThe package contains nnForge library as well as examples - applications using the library.\r\n\r\nPrerequisites\r\n-------------\r\n\r\nThe library depends on [Boost](http://www.boost.org/) and [OpenCV](http://opencv.org/).\r\n\r\nIf you want to use CUDA backend you will also need [CUDA Toolkit](https://developer.nvidia.com/cuda-toolkit) installed.\r\n\r\nAuthors\r\n-------\r\n\r\nnnForge is designed and implemented by [Maxim Milakov](http://milakov.org).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}